apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: multi-arch

  labels:
    tekton.dev/pipeline: multi-arch
  annotations:
    pipelinesascode.tekton.dev/on-event: "[push]"
    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main,devel]"

    pipelinesascode.tekton.dev/task: "git-clone"
    pipelinesascode.tekton.dev/task-1: "buildah"

    # Use maven task from hub
    # pipelinesascode.tekton.dev/task-1: "[pre-commit]"

    # You can add more tasks in here to reuse, browse the one you like from here
    # https://hub.tekton.dev/
    # example:
    # pipelinesascode.tekton.dev/task-2: "[.tekton/task/github-add-labels.yaml]"
    # pipelinesascode.tekton.dev/task-3: "[.tekton/task/github-add-comment.yaml]"

    # How many runs we want to keep attached to this event
    pipelinesascode.tekton.dev/max-keep-runs: "1"

spec:
  params:

  taskRunSpecs:
    # Build the amd64 image on dedicated amd64 hardware
    - pipelineTaskName: build-on-amd64
      taskPodTemplate:
        nodeSelector:
          kubernetes.io/arch: amd64
    # Build the arm64 image on dedicated arm64 hardware
    - pipelineTaskName: build-on-arm64
      taskPodTemplate:
        nodeSelector:
          kubernetes.io/arch: arm64

  pipelineSpec:
    params:
      #- name: repo_url
      #- name: revision
    workspaces:
      - name: source
      - name: push-secret
    tasks:
      - name: git-clone
        params:
          - name: url
            value: 'https://github.com/openshift-examples/multi-arch.git'
          - name: revision
            value: main
        taskRef:
          kind: ClusterTask
          name: git-clone
        workspaces:
          - name: output
            workspace: source

      - name: build-on-arm64
        params:
          - name: IMAGE
            value: 'quay.io/openshift-examples/multi-arch:pac-arm64'
          - name: DOCKERFILE
            value: ./Containerfile
        runAfter:
          - git-clone
        taskRef:
          kind: ClusterTask
          name: buildah
        workspaces:
          - name: source
            workspace: source
          - name: dockerconfig
            workspace: push-secret

      - name: build-on-amd64
        params:
          - name: IMAGE
            value: 'quay.io/openshift-examples/multi-arch:pac-amd64'
          - name: DOCKERFILE
            value: ./Containerfile
        runAfter:
          - build-on-arm64
        taskRef:
          kind: ClusterTask
          name: buildah
        workspaces:
          - name: source
            workspace: source
          - name: dockerconfig
            workspace: push-secret

      - name: create-and-push-manifest
        runAfter:
          - build-on-amd64
        params:
          - name: IMAGE
            value: 'quay.io/openshift-examples/multi-arch:pac'
          - name: IMAGE_URL_AMD64
            value: $(tasks.build-on-amd64.results.IMAGE_URL)
          - name: IMAGE_URL_ARM64
            value: $(tasks.build-on-arm64.results.IMAGE_URL)
        workspaces:
          - name: source
            workspace: source
          - name: dockerconfig
            workspace: push-secret
        taskSpec:
          volumes:
            - emptyDir: {}
              name: varlibcontainers
          workspaces:
            - name: source
            - description: >-
                An optional workspace that allows providing a .docker/config.json file
                for Buildah to access the container registry. The file should be placed
                at the root of the Workspace with name config.json or .dockerconfigjson.
              name: dockerconfig
              optional: true
          params:
            - description: Reference of the image buildah will produce.
              name: IMAGE
              type: string
            - default: >-
                registry.redhat.io/rhel8/buildah@sha256:00795fafdab9bbaa22cd29d1faa1a01e604e4884a2c935c1bf8e3d1f0ad1c084
              description: The location of the buildah builder image.
              name: BUILDER_IMAGE
              type: string
            - name: IMAGE_URL_AMD64
              type: string
            - name: IMAGE_URL_ARM64
              type: string
          steps:
            - name: create-and-push
              image: $(params.BUILDER_IMAGE)
              env:
                - name: IMAGE_URL_AMD64
                  value: $(params.IMAGE_URL_AMD64)
                - name: IMAGE_URL_ARM64
                  value: $(params.IMAGE_URL_ARM64)
              securityContext:
                capabilities:
                  add:
                    - SETFCAP
              volumeMounts:
                - mountPath: /var/lib/containers
                  name: varlibcontainers
              workingDir: $(workspaces.source.path)
              script: |
                if [[ "$(workspaces.dockerconfig.bound)" == "true" ]]; then

                  # if config.json exists at workspace root, we use that
                  if test -f "$(workspaces.dockerconfig.path)/config.json"; then
                    export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

                  # else we look for .dockerconfigjson at the root
                  elif test -f "$(workspaces.dockerconfig.path)/.dockerconfigjson"; then
                    cp "$(workspaces.dockerconfig.path)/.dockerconfigjson" "$HOME/.docker/config.json"
                    export DOCKER_CONFIG="$HOME/.docker"

                  # need to error out if neither files are present
                  else
                    echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
                    exit 1
                  fi
                fi
                set -x
                buildah manifest create localhost/list
                buildah manifest add localhost/list  $IMAGE_URL_AMD64
                buildah manifest add localhost/list  $IMAGE_URL_ARM64
                buildah manifest push localhost/list docker://$(params.IMAGE)

  workspaces:
    - name: source
      volumeClaimTemplate:
        metadata:
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          volumeMode: Filesystem
    - name: push-secret
      secret:
        secretName: quay-push-bot
